import { AddressSpace, BaseNode, Folder, FolderType, InstantiateObjectOptions, Namespace, ProgramFiniteStateMachine, ProgramFiniteStateMachineType, TransitionEventType, UAAnalogItem, UAObject, UAObjectType, UAReferenceType, UAVariable } from "..";
export interface FlowToReference extends UAReferenceType {
}
export interface HotFlowToReference extends UAReferenceType {
}
export interface SignalToReference extends UAReferenceType {
}
export interface BoilerHaltedEventType extends TransitionEventType {
}
export interface CustomControllerB {
    input1: UAVariable;
    input2: UAVariable;
    input3: UAVariable;
    controlOut: UAVariable;
}
export interface CustomControllerType extends CustomControllerB, UAObjectType {
}
export interface CustomController extends CustomControllerB, UAObject {
}
export interface GenericSensorB {
    output: UAAnalogItem;
}
export interface GenericSensorType extends GenericSensorB, UAObjectType {
}
export interface GenericSensor extends GenericSensorB, UAObject {
}
export interface GenericControllerB {
    controlOut: UAVariable;
    measurement: UAVariable;
    setPoint: UAVariable;
}
export interface GenericControllerType extends GenericControllerB, UAObjectType {
}
export interface GenericController extends GenericControllerB, UAObject {
}
export interface FlowControllerType extends GenericControllerType {
}
export interface FlowController extends GenericController {
}
export interface LevelControllerType extends GenericControllerType {
}
export interface LevelController extends GenericController {
}
export interface FlowTransmitterType extends GenericSensorType {
}
export interface FlowTransmitter extends GenericSensor {
}
export interface LevelIndicatorType extends GenericSensorType {
}
export interface LevelIndicator extends GenericSensor {
}
export interface GenericActuatorType extends UAObjectType {
    input: UAAnalogItem;
}
export interface GenericActuator extends UAObject {
    input: UAAnalogItem;
}
export interface ValveType extends GenericActuatorType {
}
export interface Valve extends GenericActuator {
}
export interface BoilerInputPipeType extends FolderType {
    flowTransmitter: FlowTransmitter;
    valve: Valve;
}
export interface BoilerInputPipe extends Folder {
    flowTransmitter: FlowTransmitter;
    valve: Valve;
}
export interface BoilerOutputPipeType extends FolderType {
    flowTransmitter: FlowTransmitter;
}
export interface BoilerOutputPipe extends Folder {
    flowTransmitter: FlowTransmitter;
}
export interface BoilerDrumType extends FolderType {
    levelIndicator: LevelIndicator;
}
export interface BoilerDrum extends Folder {
    levelIndicator: LevelIndicator;
}
export interface BoilerStateMachineType extends ProgramFiniteStateMachineType {
}
export interface BoilerStateMachine extends ProgramFiniteStateMachine {
}
export interface BoilerType extends UAObjectType {
    customController: CustomController;
    flowController: FlowController;
    levelController: LevelController;
    inputPipe: BoilerInputPipe;
    boilerDrum: BoilerDrum;
    outputPipe: BoilerOutputPipe;
    boilerDrum2: BoilerDrum;
    simulation: BoilerStateMachine;
    instantiate(options: InstantiateObjectOptions): Boiler;
}
export interface Boiler extends UAObject {
    customController: CustomController;
    flowController: FlowController;
    levelController: LevelController;
    inputPipe: BoilerInputPipe;
    boilerDrum: BoilerDrum;
    outputPipe: BoilerOutputPipe;
    boilerDrum2: BoilerDrum;
    simulation: BoilerStateMachine;
}
export declare function createBoilerType(namespace: Namespace): BoilerType;
export declare function makeBoiler(addressSpace: AddressSpace, options: {
    browseName: string;
    organizedBy: BaseNode;
}): Boiler;
