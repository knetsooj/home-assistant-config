"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractEventFields = void 0;
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
const node_opcua_types_1 = require("node-opcua-types");
const node_opcua_variant_1 = require("node-opcua-variant");
const session_context_1 = require("../session_context");
function assert_valid_event_data(eventData) {
    node_opcua_assert_1.assert(typeof eventData.resolveSelectClause === "function");
    node_opcua_assert_1.assert(typeof eventData.readValue === "function");
}
/**
 *
 * @method extractEventField
 * extract a eventField from a event node, matching the given selectClause
 * @param eventData
 * @param selectClause
 */
function extractEventField(sessionContext, eventData, selectClause) {
    assert_valid_event_data(eventData);
    node_opcua_assert_1.assert(selectClause instanceof node_opcua_types_1.SimpleAttributeOperand);
    selectClause.browsePath = selectClause.browsePath || [];
    if (selectClause.browsePath.length === 0 && selectClause.attributeId === node_opcua_data_model_1.AttributeIds.NodeId) {
        const eventSource = eventData.$eventDataSource;
        const addressSpace = eventSource.addressSpace;
        const conditionTypeNodeId = node_opcua_nodeid_1.resolveNodeId("ConditionType");
        const conditionType = addressSpace.findObjectType(conditionTypeNodeId);
        /* istanbul ignore next */
        if (!conditionType) {
            throw new Error("Cannot find ConditionType NodeId  !");
        }
        // "ns=0;i=2782" => ConditionType
        // "ns=0;i=2041" => BaseEventType
        if (selectClause.typeDefinitionId.toString() !== "ns=0;i=2782") {
            // not a ConditionType
            // but could be on of its derived type. for instance ns=0;i=2881 => AcknowledgeableConditionType
            const typeDefinitionObj = addressSpace.findObjectType(selectClause.typeDefinitionId);
            /* istanbul ignore next */
            if (!typeDefinitionObj) {
                throw new Error("Cannot find TypeDefinition Type !");
            }
            if (!typeDefinitionObj.isSupertypeOf(conditionType)) {
                // tslint:disable-next-line:no-console
                console.warn(" ", typeDefinitionObj ? typeDefinitionObj.browseName.toString() : "????");
                // tslint:disable-next-line:no-console
                console.warn("this case is not handled yet : selectClause.typeDefinitionId = " + selectClause.typeDefinitionId.toString());
                const eventSource1 = eventData.$eventDataSource;
                return new node_opcua_variant_1.Variant({ dataType: node_opcua_variant_1.DataType.NodeId, value: eventSource1.nodeId });
            }
        }
        const eventSourceTypeDefinition = eventSource.typeDefinitionObj;
        if (!eventSourceTypeDefinition) {
            // eventSource is a EventType class
            return new node_opcua_variant_1.Variant();
        }
        if (!eventSourceTypeDefinition.isSupertypeOf(conditionType)) {
            return new node_opcua_variant_1.Variant();
        }
        // Yeh : our EventType is a Condition Type !
        return new node_opcua_variant_1.Variant({ dataType: node_opcua_variant_1.DataType.NodeId, value: eventSource.nodeId });
    }
    const handle = eventData.resolveSelectClause(selectClause);
    if (handle !== null) {
        const value = eventData.readValue(sessionContext, handle, selectClause);
        node_opcua_assert_1.assert(value instanceof node_opcua_variant_1.Variant);
        return value;
    }
    else {
        // Part 4 - 7.17.3
        // A null value is returned in the corresponding event field in the Publish response if the selected
        // field is not part of the Event or an error was returned in the selectClauseResults of the EventFilterResult.
        // return new Variant({dataType: DataType.StatusCode, value: browsePathResult.statusCode});
        return new node_opcua_variant_1.Variant();
    }
}
/**
 * @method extractEventFields
 * extract a array of eventFields from a event node, matching the selectClauses
 * @param selectClauses
 * @param eventData : a pseudo Node that provides a browse Method and a readValue(nodeId)
 */
function extractEventFields(sessionContext, selectClauses, eventData) {
    node_opcua_assert_1.assert(sessionContext instanceof session_context_1.SessionContext);
    assert_valid_event_data(eventData);
    node_opcua_assert_1.assert(Array.isArray(selectClauses));
    node_opcua_assert_1.assert(selectClauses.length === 0 || selectClauses[0] instanceof node_opcua_types_1.SimpleAttributeOperand);
    return selectClauses.map(extractEventField.bind(null, sessionContext, eventData));
}
exports.extractEventFields = extractEventFields;
//# sourceMappingURL=extract_event_fields.js.map