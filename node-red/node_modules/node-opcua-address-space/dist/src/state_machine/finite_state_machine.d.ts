import { NodeId } from "node-opcua-nodeid";
import { State, Transition, UAObject as UAObjectPublic, UAVariable as UAVariablePublic, TransitionSelector } from "../../source";
import { BaseNode } from "../base_node";
import { UAObject } from "../ua_object";
export interface StateMachine {
    /**
     * @property currentState
     */
    currentState: UAVariablePublic;
    _currentStateNode: State | null;
}
export declare class StateMachine extends UAObject implements StateMachine {
    getStates(): UAObject[];
    get states(): any[];
    /**
     * @method getStateByName
     * @param name  the name of the state to get
     * @return the state with the given name
     */
    getStateByName(name: string): State | null;
    getTransitions(): Transition[];
    get transitions(): Transition[];
    /**
     * return the node InitialStateType
     * @property initialState
     */
    get initialState(): UAObject;
    /**
     *
     * @param node
     * @private
     */
    _coerceNode(node: State | BaseNode | null | string | NodeId): BaseNode | null;
    /**
     * @method isValidTransition
     * @param toStateNode
     * @return {boolean}
     */
    isValidTransition(toStateNode: State | string, predicate?: TransitionSelector): boolean;
    /**
     */
    findTransitionNode(fromStateNode: NodeId | State | string | null, toStateNode: NodeId | State | string | null, predicate?: TransitionSelector): Transition | null;
    get currentStateNode(): State | null;
    /**
     * @property currentStateNode
     * @type BaseNode
     */
    set currentStateNode(value: State | null);
    /**
     */
    getCurrentState(): string | null;
    /**
     * @method setState
     */
    setState(toStateNode: string | State | null, predicate?: TransitionSelector): void;
    /**
     * @internal
     * @private
     */
    _post_initialize(): void;
}
export declare function promoteToStateMachine(node: UAObjectPublic): StateMachine;
