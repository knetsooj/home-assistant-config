"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeElement = exports.addElement = exports.bindExtObjArrayNode = exports.createExtObjArrayNode = void 0;
/**
 * @module node-opcua-address-space.Private
 */
const node_opcua_assert_1 = require("node-opcua-assert");
const node_opcua_data_model_1 = require("node-opcua-data-model");
const node_opcua_debug_1 = require("node-opcua-debug");
const node_opcua_variant_1 = require("node-opcua-variant");
const node_opcua_variant_2 = require("node-opcua-variant");
const node_opcua_variant_3 = require("node-opcua-variant");
const ua_variable_1 = require("./ua_variable");
const doDebug = node_opcua_debug_1.checkDebugFlag(__filename);
const debugLog = node_opcua_debug_1.make_debugLog(__filename);
/*
 * define a complex Variable containing a array of extension objects
 * each element of the array is also accessible as a component variable.
 *
 */
function getExtObjArrayNodeValue() {
    return new node_opcua_variant_1.Variant({
        arrayType: node_opcua_variant_3.VariantArrayType.Array,
        dataType: node_opcua_variant_2.DataType.ExtensionObject,
        value: this.$$extensionObjectArray
    });
}
function removeElementByIndex(uaArrayVariableNode, elementIndex) {
    const _array = uaArrayVariableNode.$$extensionObjectArray;
    node_opcua_assert_1.assert(typeof elementIndex === "number");
    const addressSpace = uaArrayVariableNode.addressSpace;
    const extObj = _array[elementIndex];
    const browseName = uaArrayVariableNode.$$getElementBrowseName(extObj);
    // remove element from global array (inefficient)
    uaArrayVariableNode.$$extensionObjectArray.splice(elementIndex, 1);
    // remove matching component
    const node = uaArrayVariableNode.getComponentByName(browseName);
    if (!node) {
        throw new Error(" cannot find component ");
    }
    const hasComponent = uaArrayVariableNode.addressSpace.findReferenceType("HasComponent");
    // remove the hasComponent reference toward node
    uaArrayVariableNode.removeReference({
        isForward: true,
        nodeId: node.nodeId,
        referenceType: hasComponent.nodeId
    });
    // now check if node has still some parent
    const parents = node.findReferencesEx("HasChild", node_opcua_data_model_1.BrowseDirection.Inverse);
    if (parents.length === 0) {
        addressSpace.deleteNode(node.nodeId);
    }
}
/**
 *
 * create a node Variable that contains a array of ExtensionObject of a given type
 * @method createExtObjArrayNode
 * @param parentFolder
 * @param options
 * @param options.browseName
 * @param options.complexVariableType
 * @param options.variableType        the type of Extension objects stored in the array.
 * @param options.indexPropertyName
 * @return {Object|UAVariable}
 */
function createExtObjArrayNode(parentFolder, options) {
    node_opcua_assert_1.assert(typeof options.variableType === "string");
    node_opcua_assert_1.assert(typeof options.indexPropertyName === "string");
    const addressSpace = parentFolder.addressSpace;
    const namespace = parentFolder.namespace;
    const complexVariableType = addressSpace.findVariableType(options.complexVariableType);
    if (!complexVariableType) {
        throw new Error("cannot find complex variable type");
    }
    node_opcua_assert_1.assert(!complexVariableType.nodeId.isEmpty());
    const variableType = addressSpace.findVariableType(options.variableType);
    if (!variableType) {
        throw new Error("cannot find variable Type");
    }
    node_opcua_assert_1.assert(!variableType.nodeId.isEmpty());
    const structure = addressSpace.findDataType("Structure");
    node_opcua_assert_1.assert(structure, "Structure Type not found: please check your nodeset file");
    const dataType = addressSpace.findDataType(variableType.dataType);
    if (!dataType) {
        throw new Error("cannot find Data Type");
    }
    node_opcua_assert_1.assert(dataType.isSupertypeOf(structure), "expecting a structure (= ExtensionObject) here ");
    const inner_options = {
        componentOf: parentFolder,
        browseName: options.browseName,
        dataType: dataType.nodeId,
        typeDefinition: complexVariableType.nodeId,
        value: { dataType: node_opcua_variant_2.DataType.ExtensionObject, value: [], arrayType: node_opcua_variant_3.VariantArrayType.Array },
        valueRank: 1
    };
    const uaArrayVariableNode = namespace.addVariable(inner_options);
    bindExtObjArrayNode(uaArrayVariableNode, options.variableType, options.indexPropertyName);
    return uaArrayVariableNode;
}
exports.createExtObjArrayNode = createExtObjArrayNode;
/**
 * @method bindExtObjArrayNode
 * @param uaArrayVariableNode
 * @param variableTypeNodeId
 * @param indexPropertyName
 * @return
 */
function bindExtObjArrayNode(uaArrayVariableNode, variableTypeNodeId, indexPropertyName) {
    const addressSpace = uaArrayVariableNode.addressSpace;
    const variableType = addressSpace.findVariableType(variableTypeNodeId);
    if (!variableType) {
        throw new Error("Cannot find VariableType " + variableTypeNodeId.toString());
    }
    node_opcua_assert_1.assert(!variableType.nodeId.isEmpty());
    let structure = addressSpace.findDataType("Structure");
    node_opcua_assert_1.assert(structure, "Structure Type not found: please check your nodeset file");
    let dataType = addressSpace.findDataType(variableType.dataType);
    if (!dataType) {
        throw new Error("Cannot find DataType " + variableType.dataType.toString());
    }
    node_opcua_assert_1.assert(dataType.isSupertypeOf(structure), "expecting a structure (= ExtensionObject) here ");
    node_opcua_assert_1.assert(!uaArrayVariableNode.$$variableType, "uaArrayVariableNode has already been bound !");
    uaArrayVariableNode.$$variableType = variableType;
    structure = addressSpace.findDataType("Structure");
    node_opcua_assert_1.assert(structure, "Structure Type not found: please check your nodeset file");
    // verify that an object with same doesn't already exist
    dataType = addressSpace.findDataType(variableType.dataType);
    node_opcua_assert_1.assert(dataType.isSupertypeOf(structure), "expecting a structure (= ExtensionObject) here ");
    uaArrayVariableNode.$$dataType = dataType;
    uaArrayVariableNode.$$extensionObjectArray = [];
    uaArrayVariableNode.$$indexPropertyName = indexPropertyName;
    uaArrayVariableNode.$$getElementBrowseName = function (extObj) {
        const indexPropertyName1 = this.$$indexPropertyName;
        if (!extObj.hasOwnProperty(indexPropertyName1)) {
            console.log(" extension object do not have ", indexPropertyName1, extObj);
        }
        // assert(extObj.constructor === addressSpace.constructExtensionObject(dataType));
        node_opcua_assert_1.assert(extObj.hasOwnProperty(indexPropertyName1));
        const browseName = extObj[indexPropertyName1].toString();
        return browseName;
    };
    const options = {
        get: getExtObjArrayNodeValue,
        set: undefined // readonly
    };
    // bind the readonly
    uaArrayVariableNode.bindVariable(options, true);
    return uaArrayVariableNode;
}
exports.bindExtObjArrayNode = bindExtObjArrayNode;
/**
 * @method addElement
 * add a new element in a ExtensionObject Array variable
 * @param options {Object}   data used to construct the underlying ExtensionObject
 * @param uaArrayVariableNode {UAVariable}
 * @return {UAVariable}
 *
 * @method addElement
 * add a new element in a ExtensionObject Array variable
 * @param nodeVariable a variable already exposing an extension objects
 * @param uaArrayVariableNode {UAVariable}
 * @return {UAVariable}
 *
 * @method addElement
 * add a new element in a ExtensionObject Array variable
 * @param constructor  constructor of the extension object to create
 * @param uaArrayVariableNode {UAVariable}
 * @return {UAVariable}
 */
function addElement(options /* ExtensionObjectConstructor | ExtensionObject | UAVariable*/, uaArrayVariableNode) {
    node_opcua_assert_1.assert(uaArrayVariableNode, " must provide an UAVariable containing the array");
    // verify that arr has been created correctly
    node_opcua_assert_1.assert(!!uaArrayVariableNode.$$variableType && !!uaArrayVariableNode.$$dataType, "did you create the array Node with createExtObjArrayNode ?");
    node_opcua_assert_1.assert(uaArrayVariableNode.$$dataType.nodeClass === node_opcua_data_model_1.NodeClass.DataType);
    const addressSpace = uaArrayVariableNode.addressSpace;
    const Constructor = addressSpace.getExtensionObjectConstructor(uaArrayVariableNode.$$dataType);
    node_opcua_assert_1.assert(Constructor instanceof Function);
    let extensionObject;
    let elVar = null;
    let browseName;
    if (options instanceof ua_variable_1.UAVariable) {
        elVar = options;
        extensionObject = elVar.$extensionObject; // get shared extension object
        node_opcua_assert_1.assert(extensionObject instanceof Constructor, "the provided variable must expose a Extension Object of the expected type ");
        // add a reference
        uaArrayVariableNode.addReference({
            isForward: true,
            nodeId: elVar.nodeId,
            referenceType: "HasComponent"
        });
        // xx elVar.bindExtensionObject();
    }
    else {
        if (options instanceof Constructor) {
            // extension object has already been created
            extensionObject = options;
        }
        else {
            extensionObject = addressSpace.constructExtensionObject(uaArrayVariableNode.$$dataType, options);
        }
        browseName = uaArrayVariableNode.$$getElementBrowseName(extensionObject);
        elVar = uaArrayVariableNode.$$variableType.instantiate({
            browseName,
            componentOf: uaArrayVariableNode.nodeId,
            value: { dataType: node_opcua_variant_2.DataType.ExtensionObject, value: extensionObject }
        });
        elVar.bindExtensionObject();
        elVar.$extensionObject = extensionObject;
    }
    // also add the value inside
    uaArrayVariableNode.$$extensionObjectArray.push(extensionObject);
    return elVar;
}
exports.addElement = addElement;
/**
 *
 * @method removeElement
 * @param uaArrayVariableNode {UAVariable}
 * @param element {number}   index of element to remove in array
 *
 *
 * @method removeElement
 * @param uaArrayVariableNode {UAVariable}
 * @param element {UAVariable}   node of element to remove in array
 *
 * @method removeElement
 * @param uaArrayVariableNode {UAVariable}
 * @param element {ExtensionObject}   extension object of the node of element to remove in array
 *
 */
function removeElement(uaArrayVariableNode, element /* number | UAVariable | (a any) => boolean | ExtensionObject */) {
    node_opcua_assert_1.assert(element, "element must exist");
    const _array = uaArrayVariableNode.$$extensionObjectArray;
    if (_array.length === 0) {
        throw new Error(" cannot remove an element from an empty array ");
    }
    let elementIndex = -1;
    if (typeof element === "number") {
        // find element by index
        elementIndex = element;
        node_opcua_assert_1.assert(elementIndex >= 0 && elementIndex < _array.length);
    }
    else if (element && element.nodeClass) {
        // find element by name
        const browseNameToFind = element.browseName.name.toString();
        elementIndex = _array.findIndex((obj, i) => {
            const browseName = uaArrayVariableNode.$$getElementBrowseName(obj).toString();
            return browseName === browseNameToFind;
        });
    }
    else if (typeof element === "function") {
        // find element by functor
        elementIndex = _array.findIndex(element);
    }
    else {
        // find element by inner extension object
        node_opcua_assert_1.assert(_array[0].constructor.name === element.constructor.name, "element must match");
        elementIndex = _array.findIndex((x) => x === element);
    }
    if (elementIndex < 0) {
        throw new Error(" cannot find element matching " + element.toString());
    }
    return removeElementByIndex(uaArrayVariableNode, elementIndex);
}
exports.removeElement = removeElement;
//# sourceMappingURL=extension_object_array_node.js.map