import { ExpandedNodeId, NodeId } from "node-opcua-nodeid";
import { BasicTypeDefinition } from ".";
import { ConstructorFunc, ConstructorFuncWithSchema } from "./constructor_type";
import { BaseUAObject } from "./factories_baseobject";
import { EnumerationDefinitionSchema } from "./factories_enumerations";
import { StructuredTypeSchema } from "./factories_structuredTypeSchema";
export declare class DataTypeFactory {
    defaultByteOrder: string;
    targetNamespace: string;
    imports: string[];
    private _structureTypeConstructorByNameMap;
    private _structureTypeConstructorByDataTypeMap;
    private _structureTypeConstructorByEncodingNodeIdMap;
    private _enumerations;
    private _simpleTypes;
    private baseDataFactories;
    constructor(baseDataFactories: DataTypeFactory[]);
    repairBaseDataFactories(baseDataFactories: DataTypeFactory[]): void;
    registerSimpleType(name: string, dataTypeNodeId: NodeId, def: BasicTypeDefinition): void;
    hasSimpleType(name: string): boolean;
    getSimpleType(name: string): BasicTypeDefinition;
    registerEnumeration(enumeration: EnumerationDefinitionSchema): void;
    hasEnumeration(enumName: string): boolean;
    getEnumeration(enumName: string): EnumerationDefinitionSchema | null;
    findConstructorForDataType(dataTypeNodeId: NodeId): ConstructorFuncWithSchema;
    structuredTypesNames(): IterableIterator<string>;
    getStructureTypeConstructor(typeName: string): ConstructorFuncWithSchema;
    hasStructuredType(typeName: string): boolean;
    getStructuredTypeSchema(typeName: string): StructuredTypeSchema;
    dump(): void;
    registerClassDefinition(dataTypeNodeId: NodeId, className: string, classConstructor: ConstructorFuncWithSchema): void;
    getConstructor(binaryEncodingNodeId: NodeId): ConstructorFunc | null;
    hasConstructor(binaryEncodingNodeId: NodeId): boolean;
    constructObject(binaryEncodingNodeId: NodeId): BaseUAObject;
    associateWithBinaryEncoding(className: string, expandedNodeId: ExpandedNodeId): void;
    toString(): string;
    private _registerFactory;
}
export declare function callConstructor(constructor: ConstructorFunc): BaseUAObject;
