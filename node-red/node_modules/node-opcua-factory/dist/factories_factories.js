"use strict";
/**
 * @module node-opcua-factory
 */
// tslint:disable:no-console
Object.defineProperty(exports, "__esModule", { value: true });
exports.dump = exports.registerClassDefinition = exports.constructObject = exports.hasConstructor = exports.getConstructor = exports.getStructuredTypeSchema = exports.hasStructuredType = exports.getStructureTypeConstructor = exports.getStandardDataTypeFactory = void 0;
const node_opcua_debug_1 = require("node-opcua-debug");
const datatype_factory_1 = require("./datatype_factory");
const debugLog = node_opcua_debug_1.make_debugLog(__filename);
const doDebug = node_opcua_debug_1.checkDebugFlag(__filename);
let globalFactory;
function getStandardDataTypeFactory() {
    if (!globalFactory) {
        globalFactory = new datatype_factory_1.DataTypeFactory([]);
        globalFactory.targetNamespace = "http://opcfoundation.org/UA/";
    }
    return globalFactory;
}
exports.getStandardDataTypeFactory = getStandardDataTypeFactory;
function getStructureTypeConstructor(typeName) {
    return getStandardDataTypeFactory().getStructureTypeConstructor(typeName);
}
exports.getStructureTypeConstructor = getStructureTypeConstructor;
function hasStructuredType(typeName) {
    return getStandardDataTypeFactory().hasStructuredType(typeName);
}
exports.hasStructuredType = hasStructuredType;
function getStructuredTypeSchema(typeName) {
    return getStandardDataTypeFactory().getStructuredTypeSchema(typeName);
}
exports.getStructuredTypeSchema = getStructuredTypeSchema;
function getConstructor(binaryEncodingNodeId) {
    return getStandardDataTypeFactory().getConstructor(binaryEncodingNodeId);
}
exports.getConstructor = getConstructor;
function hasConstructor(binaryEncodingNodeId) {
    return getStandardDataTypeFactory().hasConstructor(binaryEncodingNodeId);
}
exports.hasConstructor = hasConstructor;
function constructObject(binaryEncodingNodeId) {
    return getStandardDataTypeFactory().constructObject(binaryEncodingNodeId);
}
exports.constructObject = constructObject;
function registerClassDefinition(dataTypeNodeId, className, classConstructor) {
    return getStandardDataTypeFactory().registerClassDefinition(dataTypeNodeId, className, classConstructor);
}
exports.registerClassDefinition = registerClassDefinition;
/* istanbul ignore next */
function dump() {
    getStandardDataTypeFactory().dump();
}
exports.dump = dump;
//# sourceMappingURL=factories_factories.js.map