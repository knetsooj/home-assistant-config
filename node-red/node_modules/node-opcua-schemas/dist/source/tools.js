"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateStructuredTypeSchema = void 0;
const node_opcua_factory_1 = require("node-opcua-factory");
const dynamic_extension_object_1 = require("./dynamic_extension_object");
const node_opcua_nodeid_1 = require("node-opcua-nodeid");
function _removeNamespacePart(str) {
    if (!str) {
        return str;
    }
    const data = str.split(":");
    return data.length > 1 ? data[1] : str;
}
function _getNamespacePart(str) {
    return str.split(":")[0];
}
function _adjustFieldTypeName(fieldTypeName) {
    // special cases
    if (fieldTypeName === "String" || fieldTypeName === "CharArray") {
        fieldTypeName = "UAString";
    }
    if (fieldTypeName === "Boolean") {
        fieldTypeName = "UABoolean";
    }
    return fieldTypeName;
}
function getOrCreateStructuredTypeSchema(name, typeDictionary, dataTypeFactory, idProvider) {
    function _getOrCreateStructuredTypeSchema(_name) {
        if (dataTypeFactory.hasStructuredType(_name)) {
            return dataTypeFactory.getStructuredTypeSchema(_name);
        }
        // construct it !
        const structuredType = typeDictionary.getStructuredTypesRawByName(_name);
        if (!structuredType) {
            throw new Error("Cannot find structuredType " + _name);
        }
        structuredType.baseType = _removeNamespacePart(structuredType.baseType);
        structuredType.baseType = structuredType.baseType ? structuredType.baseType : "ExtensionObject";
        const baseSchema = typeDictionary.getStructuredTypesRawByName(structuredType.baseType);
        // remove redundant fields
        // Note :some file do no thave SourceType property and may be replicated here ..
        //       but they belongs to the base class and shall be remove/
        //       For instance DataTypeSchemaHeader => UABinaryFileDataType
        if (baseSchema && baseSchema.fields && baseSchema.name !== "ExtensionObject") {
            structuredType.fields = structuredType.fields.filter((field) => {
                const name = field.name;
                const index = baseSchema.fields.findIndex((f) => f.name === name);
                if (index >= 0) {
                    // tslint:disable-next-line: no-console
                    console.log("Warning : find duplicated field from base structure : field name ", name, "baseSchema = ", baseSchema.name, "schema =", structuredType.name);
                }
                return index < 0;
            });
        }
        for (const field of structuredType.fields) {
            const fieldType = field.fieldType;
            if (!field.schema) {
                const prefix = _getNamespacePart(fieldType);
                const fieldTypeName = _adjustFieldTypeName(_removeNamespacePart(fieldType));
                switch (prefix) {
                    case "tns":
                        field.fieldType = fieldTypeName;
                        if (dataTypeFactory.hasEnumeration(fieldTypeName)) {
                            const enumeratedType = dataTypeFactory.getEnumeration(fieldTypeName);
                            field.category = node_opcua_factory_1.FieldCategory.enumeration;
                            field.schema = enumeratedType;
                        }
                        else {
                            // must be a structure then ....
                            field.category = node_opcua_factory_1.FieldCategory.complex;
                            const schema1 = dataTypeFactory.getStructuredTypeSchema(fieldTypeName);
                            field.schema = schema1;
                            // _getOrCreateStructuredTypeSchema(fieldTypeName);
                            if (!field.schema) {
                                // tslint:disable-next-line:no-console
                                console.log("cannot find schema for ", fieldTypeName);
                            }
                        }
                        break;
                    case "ua":
                        field.fieldType = fieldTypeName;
                        if (node_opcua_factory_1.hasBuiltInType(fieldTypeName)) {
                            field.category = node_opcua_factory_1.FieldCategory.basic;
                            field.schema = node_opcua_factory_1.getBuildInType(fieldTypeName);
                        }
                        else if (dataTypeFactory.hasStructuredType(fieldTypeName)) {
                            field.category = node_opcua_factory_1.FieldCategory.complex;
                            field.schema = dataTypeFactory.getStructuredTypeSchema(fieldTypeName);
                        }
                        else {
                            field.category = node_opcua_factory_1.FieldCategory.basic;
                            // try in this
                            field.schema = _getOrCreateStructuredTypeSchema(fieldTypeName);
                            if (!field.schema) {
                                // tslint:disable-next-line:no-console
                                console.log("What should I do ??", fieldTypeName, " ", node_opcua_factory_1.hasStructuredType(fieldTypeName));
                            }
                            else {
                                if (node_opcua_factory_1.hasBuiltInType(fieldTypeName)) {
                                    field.category = node_opcua_factory_1.FieldCategory.basic;
                                }
                                else {
                                    field.category = node_opcua_factory_1.FieldCategory.complex;
                                }
                            }
                        }
                        break;
                    case "opc":
                        if ((fieldTypeName === "UAString" || fieldTypeName === "String") && field.name === "IndexRange") {
                            field.fieldType = "NumericRange";
                            // xx console.log(" NumericRange detected here !");
                        }
                        else {
                            field.fieldType = fieldTypeName;
                        }
                        if (!node_opcua_factory_1.hasBuiltInType(fieldTypeName)) {
                            throw new Error("Unknown basic type " + fieldTypeName);
                        }
                        field.category = node_opcua_factory_1.FieldCategory.basic;
                        break;
                    default:
                        if (dataTypeFactory.hasEnumeration(fieldTypeName)) {
                            field.category = node_opcua_factory_1.FieldCategory.enumeration;
                            const enumeratedType = dataTypeFactory.getEnumeration(fieldTypeName);
                            field.schema = enumeratedType;
                        }
                        else if (dataTypeFactory.hasStructuredType(fieldTypeName)) {
                            field.category = node_opcua_factory_1.FieldCategory.complex;
                            const schema1 = dataTypeFactory.getStructuredTypeSchema(fieldTypeName);
                            field.schema = schema1;
                        }
                        break;
                }
            }
        }
        const schema = node_opcua_factory_1.buildStructuredType(structuredType);
        const ids = idProvider.getDataTypeAndEncodingId(schema.name);
        if (!ids) {
            // this may happen if the type is abstract or if the type referes to a internal ExtnsionObject
            // that can only exists inside an other extension object.this Type of extension object cannot 
            // instantiated as standalone object and do not have encoding nodeIds...
            const Constructor = dynamic_extension_object_1.createDynamicObjectConstructor(schema, dataTypeFactory);
            return schema;
        }
        schema.id = ids.dataTypeNodeId;
        schema.dataTypeNodeId = ids.dataTypeNodeId;
        if (schema.id.namespace === 0 && schema.id.value === 0) {
            return schema;
        }
        schema.encodingDefaultXml = node_opcua_nodeid_1.ExpandedNodeId.fromNodeId(ids.xmlEncodingNodeId);
        schema.encodingDefaultJson = node_opcua_nodeid_1.ExpandedNodeId.fromNodeId(ids.jsonEncodingNodeId);
        schema.encodingDefaultBinary = node_opcua_nodeid_1.ExpandedNodeId.fromNodeId(ids.binaryEncodingNodeId);
        const Constructor = dynamic_extension_object_1.createDynamicObjectConstructor(schema, dataTypeFactory);
        Constructor.encodingDefaultBinary = schema.encodingDefaultBinary;
        Constructor.encodingDefaultXml = schema.encodingDefaultXml;
        return schema;
    }
    return _getOrCreateStructuredTypeSchema(name);
}
exports.getOrCreateStructuredTypeSchema = getOrCreateStructuredTypeSchema;
//# sourceMappingURL=tools.js.map