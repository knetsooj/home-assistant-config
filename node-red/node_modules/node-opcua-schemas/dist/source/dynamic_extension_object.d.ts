import { BinaryStream, OutputBinaryStream } from "node-opcua-binary-stream";
import { ExtensionObject } from "node-opcua-extension-object";
import { DataTypeFactory, StructuredTypeSchema } from "node-opcua-factory";
import { ExpandedNodeId } from "node-opcua-nodeid";
export declare function getOrCreateConstructor(dataTypeName: string, dataTypeFactory: DataTypeFactory, encodingDefaultBinary?: ExpandedNodeId, encodingDefaultXml?: ExpandedNodeId): AnyConstructorFunc;
export declare class DynamicExtensionObject extends ExtensionObject {
    static schema: StructuredTypeSchema;
    static possibleFields: string[];
    constructor(options: any, schema: StructuredTypeSchema, factory: DataTypeFactory);
    encode(stream: OutputBinaryStream): void;
    decode(stream: BinaryStream): void;
    get schema(): StructuredTypeSchema;
    toJSON(): any;
}
interface AnyConstructable {
    schema: StructuredTypeSchema;
    possibleFields: string[];
    new (options?: any, schema?: StructuredTypeSchema, factory?: DataTypeFactory): any;
}
export declare type AnyConstructorFunc = AnyConstructable;
export declare function createDynamicObjectConstructor(schema: StructuredTypeSchema, dataTypeFactory: DataTypeFactory): AnyConstructorFunc;
export {};
