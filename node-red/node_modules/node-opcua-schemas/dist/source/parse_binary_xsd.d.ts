/**
 * @module node-opcua-schemas
 */
import { DataTypeFactory } from "node-opcua-factory";
import { NodeId } from "node-opcua-nodeid";
export interface EnumeratedType {
    name: string;
    documentation?: string;
    enumeratedValues: any;
    lengthInBits?: number;
}
export interface StructureTypeRaw {
    name: string;
    baseType?: string;
    base?: StructureTypeRaw;
    fields: any[];
}
export interface ITypeDictionary {
    targetNamespace: string;
    imports: string[];
    structuredTypesRaw: StructureTypeRaw[];
    enumeratedTypesRaw: EnumeratedType[];
}
export declare class TypeDictionary implements ITypeDictionary {
    targetNamespace: string;
    imports: string[];
    structuredTypesRaw: StructureTypeRaw[];
    enumeratedTypesRaw: EnumeratedType[];
    private structuredTypesRawMap;
    constructor();
    addRaw(structuredType: StructureTypeRaw): void;
    getStructuredTypesRawByName(name: string): StructureTypeRaw;
}
export interface DataTypeAndEncodingId {
    dataTypeNodeId: NodeId;
    binaryEncodingNodeId: NodeId;
    xmlEncodingNodeId: NodeId;
    jsonEncodingNodeId: NodeId;
}
export interface MapDataTypeAndEncodingIdProvider {
    getDataTypeAndEncodingId(key: string): DataTypeAndEncodingId | null;
}
export declare function parseBinaryXSD(xmlString: string, idProvider: MapDataTypeAndEncodingIdProvider, dataTypeFactory: DataTypeFactory, callback: (err?: Error | null) => void): void;
export declare function parseBinaryXSDAsync(xmlString: string, idProvider: MapDataTypeAndEncodingIdProvider, dataTypeFactory: DataTypeFactory): Promise<void>;
