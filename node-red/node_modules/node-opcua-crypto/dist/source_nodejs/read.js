"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readPublicRsaKey = exports.readPrivateRsaKey = exports.read_sshkey_as_pem = exports.setCertificateStore = exports.readPrivateKeyPEM = exports.readPublicKeyPEM = exports.readCertificatePEM = exports.readPrivateKey = exports.readPublicKey = exports.readCertificate = exports.readKeyPem = void 0;
const assert = require("assert");
const fs = require("fs");
const path = require("path");
const crypto_utils_1 = require("../source/crypto_utils");
const sshpk = require("sshpk");
/**
 * @method readKeyPem
 * @param filename
 */
function readKeyPem(filename) {
    const raw_key = fs.readFileSync(filename, "utf8");
    const pemType = crypto_utils_1.identifyPemType(raw_key);
    assert(typeof pemType === "string"); // must have a valid pem type
    return raw_key;
}
exports.readKeyPem = readKeyPem;
function _readPemFile(filename) {
    assert(typeof filename === "string");
    return fs.readFileSync(filename, "ascii");
}
function _readPemOrDerFileAsDER(filename) {
    if (filename.match(/.*\.der/)) {
        return fs.readFileSync(filename);
    }
    const raw_key = _readPemFile(filename);
    return crypto_utils_1.convertPEMtoDER(raw_key);
}
/**
 * read a DER or PEM certificate from file
 */
function readCertificate(filename) {
    return _readPemOrDerFileAsDER(filename);
}
exports.readCertificate = readCertificate;
/**
 * read a DER or PEM certificate from file
 */
function readPublicKey(filename) {
    return _readPemOrDerFileAsDER(filename);
}
exports.readPublicKey = readPublicKey;
/**
 * read a DER or PEM certificate from file
 */
function readPrivateKey(filename) {
    return _readPemOrDerFileAsDER(filename);
}
exports.readPrivateKey = readPrivateKey;
function readCertificatePEM(filename) {
    return _readPemFile(filename);
}
exports.readCertificatePEM = readCertificatePEM;
function readPublicKeyPEM(filename) {
    return _readPemFile(filename);
}
exports.readPublicKeyPEM = readPublicKeyPEM;
function readPrivateKeyPEM(filename) {
    return _readPemFile(filename);
}
exports.readPrivateKeyPEM = readPrivateKeyPEM;
let __certificate_store = path.join(__dirname, "../../certificates/");
function setCertificateStore(store) {
    const old_store = __certificate_store;
    __certificate_store = store;
    return old_store;
}
exports.setCertificateStore = setCertificateStore;
function read_sshkey_as_pem(filename) {
    if (filename.substr(0, 1) !== ".") {
        filename = __certificate_store + filename;
    }
    const key = fs.readFileSync(filename, "ascii");
    const sshKey = sshpk.parseKey(key, "ssh");
    return sshKey.toString("pkcs8");
}
exports.read_sshkey_as_pem = read_sshkey_as_pem;
/**
 *
 * @param filename
 */
function readPrivateRsaKey(filename) {
    if (filename.substr(0, 1) !== "." && !fs.existsSync(filename)) {
        filename = __certificate_store + filename;
    }
    return fs.readFileSync(filename, "ascii");
}
exports.readPrivateRsaKey = readPrivateRsaKey;
function readPublicRsaKey(filename) {
    return readPrivateRsaKey(filename);
}
exports.readPublicRsaKey = readPublicRsaKey;
//# sourceMappingURL=read.js.map