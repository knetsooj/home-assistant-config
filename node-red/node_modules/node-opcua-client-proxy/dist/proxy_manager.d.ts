import { DataValue, TimestampsToReturn } from "node-opcua-data-value";
import { NodeIdLike } from "node-opcua-nodeid";
import { CreateSubscriptionRequestOptions, MonitoringParametersOptions } from "node-opcua-service-subscription";
import { CallbackT, StatusCode } from "node-opcua-status-code";
import { ErrorCallback } from "node-opcua-status-code";
import { IBasicSession } from "node-opcua-pseudo-session";
import { ReadValueIdOptions } from "node-opcua-service-read";
import { Variant } from "node-opcua-variant";
import { ProxyStateMachineType } from "./state_machine_proxy";
import { WriteValueOptions } from "node-opcua-service-write";
export interface IClientSubscription {
    monitor(itemToMonitor: ReadValueIdOptions, monitoringParameters: MonitoringParametersOptions, timestampToReturn: TimestampsToReturn, callback: CallbackT<IClientMonitoredItemBase>): void;
    terminate(callback: () => void): void;
    on(eventName: "terminated", eventHandler: () => void): void;
}
export interface IClientMonitoredItemBase {
    on(eventName: "changed", eventHandler: (data: DataValue | Variant[]) => void): void;
}
export interface IBasicSessionWithSubscription extends IBasicSession {
    write(nodeToWrite: WriteValueOptions, callback: CallbackT<StatusCode>): void;
    write(nodeToWrite: WriteValueOptions[], callback: CallbackT<StatusCode[]>): void;
    createSubscription2(options: CreateSubscriptionRequestOptions, callback: CallbackT<IClientSubscription>): void;
}
export declare class UAProxyManager {
    readonly session: IBasicSessionWithSubscription;
    subscription?: IClientSubscription;
    private _map;
    constructor(session: IBasicSessionWithSubscription);
    start(): Promise<void>;
    start(callback: (err?: Error) => void): void;
    stop(): Promise<void>;
    stop(callback: (err?: Error) => void): void;
    getObject(nodeId: NodeIdLike): Promise<any>;
    getObject(nodeId: NodeIdLike, callback: (err: Error | null, object?: any) => void): void;
    _monitor_value(proxyObject: any, callback: ErrorCallback): void;
    _monitor_execution_flag(proxyObject: any, callback: (err?: Error) => void): void;
    getStateMachineType(nodeId: NodeIdLike, callback: (err: Error | null, stateMachineType?: ProxyStateMachineType) => void): void;
}
