"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeExtensionObjectReader = void 0;
const xml2json_1 = require("./xml2json");
const node_opcua_utils_1 = require("node-opcua-utils");
function BasicType_parser(dataType, parseFunc) {
    const r = {
        init(elementName, attrs) {
            this.value = undefined;
        },
        finish() {
            this.value = parseFunc.call(this, this.text);
        }
    };
    const _parser = {};
    _parser[dataType] = r;
    return _parser;
}
function ListOf(dataType, parseFunc) {
    return {
        init() {
            this.value = [];
        },
        parser: BasicType_parser(dataType, parseFunc),
        finish() { },
        endElement(elementName) {
            this.value.push(this.parser[elementName].value);
        }
    };
}
const localizedTextReader = {
    init() {
        this.localizedText = {};
    },
    parser: {
        Locale: {
            finish() {
                this.parent.localizedText = this.parent.localizedText || {};
                this.parent.localizedText.locale = this.text.trim();
            }
        },
        Text: {
            finish() {
                this.parent.localizedText = this.parent.localizedText || {};
                this.parent.localizedText.text = this.text.trim();
            }
        }
    },
    finish() {
        this.value = this.localizedText;
    }
};
const partials = {
    LocalizedText: localizedTextReader,
    String: {
        finish() {
            this.value = this.text;
        }
    },
    Boolean: {
        finish() {
            this.value = this.text.toLowerCase() === "true";
        }
    },
    ByteString: {
        init() {
            this.value = null;
        },
        finish() {
            const base64text = this.text;
            const byteString = Buffer.from(base64text, "base64");
            this.value = byteString;
        }
    },
    Float: {
        finish() {
            this.value = parseFloat(this.text);
        }
    },
    Double: {
        finish() {
            this.value = parseFloat(this.text);
        }
    },
    Int8: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    Int16: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    Int32: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    Int64: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    UInt8: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    UInt16: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    UInt32: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    UInt64: {
        finish() {
            this.value = parseInt(this.text, 10);
        }
    },
    ListOfLocalizedText: {
        init() {
            this.value = [];
        },
        parser: { LocalizedText: localizedTextReader },
        finish() { },
        endElement() {
            this.value.push(this.parser.LocalizedText.value);
        }
    },
    ListOfDouble: ListOf("Double", parseFloat),
    ListOfFloat: ListOf("Float", parseFloat),
    ListOfInt32: ListOf("Int32", parseInt),
    ListOfInt16: ListOf("Int16", parseInt),
    ListOfInt8: ListOf("Int8", parseInt),
    ListOfUint32: ListOf("Uint32", parseInt),
    ListOfUint16: ListOf("Uint16", parseInt),
    ListOfUint8: ListOf("Uint8", parseInt)
};
function _clone(a) {
    if (typeof a === "string" || typeof a === "number" || typeof a === "boolean") {
        return a;
    }
    if (a instanceof Array) {
        return a.map((x) => _clone(x));
    }
    return Object.assign({}, a);
}
function _makeExtensionObjectReader(definitionName, definitionMap, readerMap) {
    // is it a basic type ?
    if (partials.hasOwnProperty(definitionName)) {
        return partials[definitionName];
    }
    let reader = readerMap[definitionName];
    if (reader) {
        return reader;
    }
    const definition = definitionMap.findDefinition(definitionName);
    if (!definition) {
        throw new Error("cannot find definition for " + definitionName);
    }
    reader = {
        finish() { },
        parser: {}
    };
    for (const field of definition.fields) {
        const fieldReader = _makeExtensionObjectReader(field.dataType, definitionMap, readerMap);
        if (!fieldReader) {
            throw new Error(" Cannot find reader for dataType " + field.dataType);
        }
        if (field.valueRank === undefined || field.valueRank === -1) {
            const parser = fieldReader;
            if (!parser) {
                throw new Error("??? " + field.dataType + "  " + field.name);
            }
            reader.parser[field.name] = {
                parser: fieldReader.parser,
                // endElement: fieldReader.endElement,
                finish() {
                    const elName = node_opcua_utils_1.lowerFirstLetter(field.name);
                    fieldReader.finish.call(this);
                    this.parent.value = this.parent.value || {};
                    this.parent.value[elName] = _clone(this.value);
                }
            };
        }
        else if (field.valueRank === 1) {
            const listReader = {
                init() {
                    this.value = [];
                },
                parser: {},
                finish() {
                    const elName = node_opcua_utils_1.lowerFirstLetter(this.name);
                    this.parent.value = this.parent.value || {};
                    this.parent.value[elName] = this.value;
                    this.value = undefined;
                },
                startElement(name, attrs) {
                    // empty
                },
                endElement(element) {
                    this.value.push(_clone(this.parser[element].value));
                }
            };
            listReader.parser[field.dataType] = fieldReader;
            reader.parser[field.name] = listReader;
        }
        else {
            throw new Error("Unsupported ValueRank !");
        }
    }
    // xx const parser: ParserLike = {};
    // xx parser[definition.name] = reader;
    readerMap[definitionName] = reader;
    return reader;
}
function makeExtensionObjectReader(definitionName, definitionMap, readerMap) {
    const reader1 = {
        parser: {},
        endElement() {
            //         console.log(this.parser[definitionName].value);
            this._pojo = this.parser[definitionName].value;
        }
    };
    reader1.parser[definitionName] = _makeExtensionObjectReader(definitionName, definitionMap, readerMap);
    return new xml2json_1.ReaderState(reader1);
}
exports.makeExtensionObjectReader = makeExtensionObjectReader;
//# sourceMappingURL=extension_object_parser.js.map