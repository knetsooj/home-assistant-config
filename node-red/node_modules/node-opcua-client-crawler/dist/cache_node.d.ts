import { ReferenceDescription, QualifiedName, NodeClass, LocalizedText, DataValue, AccessLevelFlag } from "node-opcua-client";
import { NodeId } from "node-opcua-nodeid";
import { DataTypeDefinition } from "node-opcua-types";
export declare class CacheNode {
    referenceToParent?: ReferenceDescription;
    parent?: CacheNode;
    nodeId: NodeId;
    browseName: QualifiedName;
    references: ReferenceDescription[];
    nodeClass: NodeClass;
    typeDefinition: any;
    displayName: LocalizedText;
    description: LocalizedText;
    constructor(nodeId: NodeId);
    toString(): string;
    dispose(): void;
}
export interface CacheNodeDataType extends CacheNode {
    nodeClass: NodeClass.DataType;
    dataTypeDefinition: DataTypeDefinition;
}
export declare class CacheNodeVariable extends CacheNode {
    nodeClass: NodeClass.Variable;
    dataValue?: DataValue;
    constructor(nodeId: NodeId);
    dispose(): void;
}
export interface CacheNodeVariable extends CacheNode {
    dataType: NodeId;
    dataValue?: DataValue;
    minimumSamplingInterval: number;
    accessLevel: AccessLevelFlag;
    userAccessLevel: AccessLevelFlag;
    arrayDimensions?: number[];
    valueRank?: number;
}
export declare class CacheNodeVariableType extends CacheNode {
    nodeClass: NodeClass.VariableType;
    dataValue?: DataValue;
    constructor(nodeId: NodeId);
    dispose(): void;
}
export interface CacheNodeVariableType extends CacheNode {
    nodeClass: NodeClass.VariableType;
    isAbstract: boolean;
    dataType: NodeId;
    dataValue?: DataValue;
    accessLevel: AccessLevelFlag;
    arrayDimensions?: number[];
    valueRank?: number;
}
export interface CacheNodeObjectType extends CacheNode {
    nodeClass: NodeClass.ObjectType;
    isAbstract: boolean;
    accessLevel: AccessLevelFlag;
    eventNotifier: number;
}
export interface CacheNodeReferenceType extends CacheNode {
    nodeClass: NodeClass.ReferenceType;
    isAbstract: boolean;
    inverseName: LocalizedText;
}
