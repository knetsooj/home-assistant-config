/// <reference types="node" />
import { QualifiedName, ReferenceDescription, BrowseResult, NodeId } from "node-opcua-client";
import { CacheNode, UserData } from ".";
export declare type EmptyCallback = () => void;
export declare const pendingBrowseName: QualifiedName;
export declare function dedup_reference(references: ReferenceDescription[]): ReferenceDescription[];
export interface TaskBase {
    name?: string;
}
export interface TaskBrowseNode {
    action: (object: CacheNode) => void;
    cacheNode: CacheNode;
    nodeId: NodeId;
    referenceTypeId: NodeId;
}
export interface TaskBrowseNext extends TaskBrowseNode {
    continuationPoint: Buffer;
}
export interface TaskCrawl extends TaskBase {
    param: {
        cacheNode: CacheNode;
        userData: UserData;
    };
    func: (task: TaskCrawl, callback: EmptyCallback) => void;
}
export interface Task2 extends TaskBase {
    param: {
        childCacheNode?: any;
        parentNode?: CacheNode;
        reference?: ReferenceDescription;
    };
    func: (task: Task2, callback: EmptyCallback) => void;
}
export interface TaskProcessBrowseResponse extends TaskBase {
    param: {
        objectsToBrowse: TaskBrowseNode[];
        browseResults: BrowseResult[];
    };
    func: (task: TaskProcessBrowseResponse, callback: EmptyCallback) => void;
}
export interface TaskExtraReference extends TaskBase {
    param: {
        childCacheNode: CacheNode;
        parentNode: CacheNode;
        reference: any;
        userData: UserData;
    };
    func: (task: TaskExtraReference, callback: EmptyCallback) => void;
}
export interface TaskReconstruction extends TaskBase {
    data: CacheNode;
    func: (task: TaskReconstruction, callback: EmptyCallback) => void;
}
export declare type Task = TaskCrawl | Task2 | TaskProcessBrowseResponse | TaskExtraReference;
export declare function remove_cycle(object: any, innerCallback: (err: Error | null, object?: any) => void): void;
